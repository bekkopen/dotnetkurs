{"name":".NET introduksjonskurs","tagline":"Bootcamp 2015","body":"# Del 1 - .NET & C# \r\n\r\n## Oppgave 1 – Hello World\r\nDen første oppgaven er temmelig enkel:\r\nLag en \"Hello World\"-applikasjon.\r\n\r\n## Oppgave 2 – Personer\r\nVår applikasjon vil omhandle personer. Disse personene har egenskaper som navn, alder, hårfarge, høyde og kjønn. Disse egenskapene skal registreres. En persons alder kan ikke være mindre enn 0.\r\n\r\nLag en klasse med properties som reflekterer dette. Du kan gjerne overskrive ToString-metoden. Den vil bli brukt i en senere oppgave.\r\n\r\n## Oppgave 3 – Log\r\nKunden vår ønsker å ha mulighet til å logge hendelser.\r\n\r\nLag en metode på person-klassen som logger utsagn til konsollet (Console.WriteLine()). Metoden skal logge ett eller flere utsagn om gangen. Hvert utsagn skal prefikses med personens navn.  (Bonuspoeng til de som klarer å legge til et default utsagn: ”Blah blah blah..” )\r\nEksempellogg:\r\n\r\n```\r\nStarter loggen…\r\n\r\nKanye: “I feel like I'm too busy writing history to read it.”\r\nKanye: “I don't even listen to rap. My apartment is too nice to listen to rap in.”\r\n```\r\n\r\n## Oppgave 4 – Enums\r\nKunden vår holder oppsikt med et stort antall personer. Det er ikke alltid alle oppfører seg like fint, og kunden vil ha mulighet til å registrere hvorvidt en person oppfører seg bra eller dårlig. Kunden har dessverre ikke full oversikt, så systemet må også ha mulighet for å registrere at oppførselen er ukjent. Begynn derfor denne oppgaven med å lage en enum som gjenspeiler dette.\r\n\r\nOpprett en property på personobjektet som kan lagre en persons oppførsel.\r\n\r\n## Oppgave 5 – Liste av personer\r\nMed vår nye kunnskap ser vi at deler av systemet kan forenkles. Benytt object initializers til å opprette en array med personer. Se forslag til testpersoner under:\r\n\r\nNavn | Alder | Hårfarge | Høyde | Tilbøyelighet | Kjønn\r\n---- | ----- | -------- | ----- | ------------- | ------\r\nPatrick Bateman\t| 27 | Brun | 184cm | Ond | M\r\nMystique | 127 | Rød | 177cm | Ond | K\r\nTwo Face | 58 | Brun | 183cm | Ond | M\r\nCruella De Vil | 65 | Svart og Hvitt | 168cm | Ond | K\r\nOrochimaru | 100 | Svart | 180cm | Ond | M\r\nHarvey Dent | 56 | Brun | 183cm | God | M\r\nKong Harald | 75 | Ukjent | 150cm | God | M\r\n\r\nKunden ønsker å få skrevet ut en liste over alle personene som er registrert i systemet.\r\nIterer igjennom personene i registeret og kall ToString-metoden på hvert personobjekt.\r\n\r\n## Oppgave 6 – Filtrering\r\nNå som dere har bygget litt kompetanse ønsker kunden å få se noen reelle resultater.\r\nPersoner som har svart hår eller er over 100 år gamle er klart mistenkelige. Kunden vil gjerne ha en utskrift over disse personene så snart som mulig.\r\n\r\nBruk LINQ til å hente ut en liste over disse personene.\r\n\r\n## Oppgave 7 – Group by\r\nKunden har nok en god dag og er strålende fornøyd. Nå som han har fått gjennomslag for såpass mye ny funksjonalitet så ønsker han å fortsette å utvikle systemet. \r\n\r\nKunden ønsker seg en oversikt over personene som er registrert i systemet fordelt etter tilbøyelighet.\r\nTa utgangspunkt i lista fra forrige oppgave og grupper på tilbøyelighet. Skriv ut grupperingene.\r\nEksempel:\r\n\r\n    Eeevil:\r\n        Hans\r\n        Gretchen\r\n    Good:\r\n        Petter Sprett\r\n        Kristoffer Robin\r\n    Dontknow:\r\n        Supermann\r\n\r\n## Oppgave 8 – Extension methods\r\nDet viser seg at systemet inneholder en del feilregistrerte telefonnummere. I ekstreme tilfeller går systemet ned med en uhåndtert NullReferenceException.\r\n\r\nLag en extension-metode for string-klassen som kan validere telefonnummere. Gi metoden navnet IsValidPhoneNumber. Det holder å sjekke at nummeret er satt, og at det er minst 8 tegn langt.\r\n\r\n## Oppgave 9 – Lambda-uttrykk\r\nArray-klassen har en generisk, statisk metode som heter Find. Metoden tar inn en array og ett predikat. \r\nLag et lambda-uttrykk som returnerer true hvis personen som gis inn er over 80 år.\r\n\r\nBenytt Find-metoden sammen med lambdauttrykket for å finne en person i lista som er over 80.\r\n\r\n> _Hint: Et predikat er en delegat som tar inn ett objekt og returnerer en boolsk verdi._\r\n\r\n## Oppgave 10 – Spørreoperatorer\r\n### Oppgave 10.1 Where\r\nEn lokal kiosk har blitt ranet, og ransmannen kom seg unna i en stor rød folkevogn. Opptakene fra kioskens overvåkningskamera viser at raneren var over 1.80 meter høy og vitner hevder han hadde brunt hår. Benytt Where-operatoren til å hente ut en liste over mulige forbrytere.\r\n\r\n### Oppgave 10.2\r\nBenytt Select-operatoren til å hente ut en array med alle navnene til alle i registeret.\r\n\r\n\r\n# Del 2 – ASP.NET MVC\r\n\r\n## Oppgave 1 – To sider som lenker til hverandre\r\nKunden er fornøyd med registeret og ønsker at flere skal kunne bruke det via web.\r\n\r\n1. Opprett en ny ASP.NET Web Application\r\n2. Velg Empty template\r\n3. Huk av for MVC under under «Add folders and core references for»\r\n4. Fjern haken for «Host in the cloud»\r\n\r\nLegg til to Controllere; Home og Persons. Legg til en Index-action på hver av Controllerne, som returnerer et View. Opprett en link som går fra Home-viewet til Persons-viewet og vice versa.\r\n\r\n## Oppgave 2 – Utlisting av personer\r\nKopier Person-klassen fra tidligere oppgaver til Models-mappa i ASP.NET MVC-prosjektet. Gjør Index-Viewet til Persons-Controlleren sterkt typet til en liste av Personer. Gjenbruk koden fra Del 1, Oppgave 5 og send inn disse personene til Viewet. Skriv ut listen av personer i en tabell.\r\n\r\nFor enkelhetsskyld dropper vi å registrere om en person er ond/god, så du kan fjerne Enum + Property for dette.\r\n\r\n## Oppgave 3 – Registrere nye personer\r\nVi har behov for å kunne registrere nye personer i systemet. Lag et nytt Insert View, og en ny Insert Action på Person Controlleren. Viewet burde være sterkt typet til Person-typen. Du må også lage en Insert-action som tar inn en Person, og dekorere den med HttpPost-attributet, for å kunne sende en person til serveren.\r\n\r\nLegg til valideringsregler som sørger for at en person må være mellom 0 og 150 år, 0 og 250cm, at navn og kjønn er påkrevd, og at kjønn kun kan være verdiene M eller K (hint: ^[MK]{1}$).\r\n\r\nSett et break-point i Insert-actionen for å sjekke at du får inn et gyldig Person-objekt. Send brukeren tilbake til listen over personer dersom objektet er gyldig.\r\n\r\n## Oppgave 4 – Registrere personer i database\r\nFor at systemet skal bli virkelig nyttig må vi kunne registrere nye personer i en database. Legg inn SqlCompact og Entity Framework ved hjelp av NuGet:\r\n\r\n    Install-Package EntityFramework.SqlServerCompact\r\n\r\nEntityFramework.SqlServerCompact er avhengig av Microsoft.SqlServer.Compact og vil automatisk hente og installere denne avhengigheten.\r\n\r\nDu må også lage en DbContext-klasse i Model-mappen.\r\n\r\n```c#\r\npublic class PersonContext : DbContext\r\n{\r\n    public DbSet<Person> Persons { get; set; }\r\n}\r\n```\r\n\r\nNå er du klar til å begynne å bruke databasen. Oppdater Index-Actionen på Persons-Controlleren til å lese alle personene fra databasen ved hjelp av LINQ.\r\n\r\nLegg så til en ny Action, Insert og lenke til denne fra Index-Viewet. Bruk innebygget scaffolding til å lage et nytt Insert-View. Legg til en Insert-Action som tar en Person-Model, og som er satt til HTTP POST. Lagre denne i databasen ved hjelp av LINQ, og send brukeren tilbake til oversikten.\r\n\r\n## Oppgave 5 – Oppdatere en eksisterende person\r\nKunden har behov for å kunne oppdatere registrerte personer. Lag en ny Update-Action med View. Lenke til denne fra tabellen med personer, f.eks. ved å legge inn en ny kolonne som heter «Rediger» på slutten av hver rad. Husk å sende inn ID til personen som skal redigeres.\r\n\r\n```html\r\n<td>@Html.ActionLink(\"Rediger\", \"Update\", new {Id = person.Id})</td>\r\n```\r\n\r\nHer må du også ha to Actions som begge heter Update (de _må_ ikke hete det samme, men det er vanlig å gjøre det slik). Den ene tar inn en Id og henter personen som skal redigeres fra databasen og sender ham til Viewet. Den andre tar inn den oppdaterte Personen i en HTTP POST, og lagrer endringene i databasen.\r\n\r\nSend brukeren tilbake til oversikten når personen er oppdatert.\r\n\r\n## Oppgave 6 – Slette en eksisterende person\r\nOm du har tilgjengelig tid, se om du får til å legge inn funksjonalitet for å slette en person.\r\n\r\n## Oppgave 7 – Returnere en liste av personer som JSON\r\nFor å kunne bruke systemet fra flest mulig enheter ønsker kunden ett enkelt web api. Lag en ny Action som returnerer en oversikt over alle kundene som JSON.\r\n\r\n## Oppgave 8 – Lage et ordentlig Web API\r\nDet viser seg at api-et i forrige oppgave blir for enkelt. Kunden har behov for å kunne svare med JSON til klientene som ønsker dette, XML til de som ønsker det, og på toppen av det hele: URL-ene må være best practice for REST. På tide å bruke ASP.NET Web API.\r\n\r\n> _Hint: Web Api 2 Controller._\r\n\r\n## Oppgave 9 – Legg til rulleblad\r\nDe slemmeste av skurkene har et langt rulleblad. Kunden ønsker mulighet til å holde rede på disse. Legg til modellen Crime og koble denne opp mot Person-modellen. Crime skal minst ha en dato for når handlingen skjedde og en tekst som beskriver handlingen. Sørg for at URL-en `/api/persons/1/crimes` returnerer alle kriminelle handlinger for personen med id == 1 osv. Crime-modellen skal også persisteres i databasen på lik linje med Person.\r\n\r\n> _Hint: Databasemigreringer, Route-attributter_\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}